{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","className","value","onChange","target","id","placeholder","getGifts","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","count","style","marginLeft","padding","href","src","alt","GifGrid","setCount","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","onClick","GifExpertApp","categories","index","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BL,EAAc,IACdH,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,UAOxC,6CACA,2BAAOC,KAAK,OAAOC,UAAU,eAC7BC,MAAOV,EAAYW,SAjBD,SAACR,GACvBF,EAAeE,EAAES,OAAOF,QAgB8BG,GAAG,GAAGC,YAAY,O,uBCxBnEC,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEmCC,UAAUH,GAF7C,+DAGDI,MAAMF,GAHL,cAGdG,EAHc,gBAICA,EAAKC,OAJN,uBAIbC,EAJa,EAIbA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHb,GAAIa,EAAIb,GACRc,MAAOD,EAAIC,MACXT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,QATtB,kBAYbM,GAZa,4CAAH,sDCERM,EAAc,SAAC,GAAoB,IAAlBJ,EAAiB,EAAjBA,IAAKK,EAAY,EAAZA,MAC/B,OACI,yBAAKC,MAAO,CAACC,WAAY,SACrB,4BACA,yBAAKD,MAAO,CAACE,QAAS,OAAQzB,UAAU,qDACpC,uBAAG0B,KAAK,iDAAiD1B,UAAU,+EAC/D,0BAAMA,UAAU,kCAAhB,IAAkD,mCAASsB,EAAT,KAAlD,KACA,yBAAKtB,UAAU,wCACX,wBAAIA,UAAU,MAAd,IAAsBiB,EAAIC,MAA1B,MAEJ,yBAAKS,IAAKV,EAAIR,IAAKT,UAAU,YAAY4B,IAAKX,EAAIC,aCPzDW,EAAU,SAAC,GAAoB,IAAjBtB,EAAgB,EAAhBA,SAAgB,EAEbjB,mBAAS,GAFI,mBAEhCgC,EAFgC,KAEzBQ,EAFyB,OCDf,SAACvB,GAAe,IAAD,EACbjB,mBAAS,CAC/BwB,KAAM,GACNiB,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KA2BvC,OAfAC,qBAAW,WAEP5B,EAAUC,GAAW4B,MAAM,SAACC,GACxBC,YAAW,WACPJ,EAAS,CACLnB,KAAMsB,EACNL,SAAS,MAEd,UAKR,CAACxB,IAEGyB,EDtB0BM,CAAa/B,GAAhCY,EAJyB,EAI/BL,KAAciB,EAJiB,EAIjBA,QAEtB,OACI,oCACI,6BACA,wBAAI/B,UAAU,qCAAd,IAAqDO,EAArD,KAEEwB,GAAY,uBAAG/B,UAAU,oCAAb,gBACd,yBAAKA,UAAU,aAGHmB,EAAOH,KAAK,SAACC,GAAD,OAER,kBAAC,EAAD,CAAasB,IAAKtB,EAAIb,GAAIa,IAAKA,EAAKK,MAAOA,OAGnD,4BAAQvB,KAAK,SAASC,UAAU,kCAChCwC,QAAU,WAAQV,EAAUR,EAAM,KADlC,YEaLmB,EAlCM,WAAO,IAAD,EACanD,mBAAS,IADtB,mBAChBoD,EADgB,KACJrD,EADI,KAQvB,OACI,oCACI,8CACA,6BAEA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAIA,4BACI,yCAEIqD,EAAW1B,KAAK,SAACT,EAAUoC,GAAX,OACZ,kBAAC,EAAD,CAASJ,IAAKhC,EAAUA,SAAUA,U,MCnB1DqC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.c62fc1d6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if ( inputValue.trim().length > 1 ) {\r\n            setInputValue('');\r\n            setCategories( cats => [ inputValue, ...cats] );\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <h2> AddCategory </h2>\r\n            <input type=\"text\" className=\"form-control\" \r\n            value={inputValue} onChange={ handleInputChange } id=\"\" placeholder=\"\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifts = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=uyRvZQC4alZuhGaK9y5m6nBwYbzU8qdU`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {img, count} ) => {\r\n    return (\r\n        <div style={{marginLeft: \"15px\"}}>\r\n            <li>\r\n            <div style={{padding: \"5px\"}} className=\"list-group card animate__animated animate__bounce\">\r\n                <a href=\"https://es.reactjs.org/docs/faq-structure.html\" className=\"list-group-item list-group-item-action flex-column align-items-start active\">\r\n                    <span className=\"badge badge-pill badge-warning\"> <small> {count} </small> </span>\r\n                    <div className=\"d-flex w-100 justify-content-between\">\r\n                        <h5 className=\"h5\"> { img.title } </h5>\r\n                    </div>\r\n                    <img src={img.url} className=\"img-fluid\" alt={img.title} />\r\n                </a>\r\n            </div>\r\n            </li>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n// import { getGifts } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n    // const [images, setImages] = useState([]);\r\n    const [count, setCount] = useState(0);\r\n    // cambiamos la varible por images\r\n    const { data: images, loading} = useFetchGifs(category);\r\n    \r\n    return (\r\n        <>\r\n            <hr/>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n            {/* Doble ampersan condición logica and, validación corta */}\r\n            { loading &&  <p className=\"animate__animated animate__flash\"> Loading... </p>}\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        // Desestructuración\r\n                        images.map( (img) => (\r\n                            // Otra manera de desestructuración: {...img} ----> {id, title, url}\r\n                            <GifGridItem key={img.id} img={img} count={count}/>\r\n                        ))\r\n                    }\r\n                    <button type=\"button\" className=\"btn btn-danger btn-lg btn-block\" \r\n                    onClick={ () => { setCount( count+1 ) } }>Click</button>\r\n                    \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nimport { getGifts } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category)  => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // El HOOK useEffect permite ejecutar una sola vez\r\n    // El 2 parametro es una lista de dependencias y si lo dejo [] indica que solo 1 vez se ejecutará \r\n    /* \r\n        \"Si estás familiarizado con el ciclo de vida de las clases de React y sus métodos, \r\n        el Hook useEffect equivale a componentDidMount, componentDidUpdate y componentWillUnmount combinados.\"\r\n    */\r\n    useEffect( ()=> {\r\n        // Función de Helpers retorna una promesa\r\n        getGifts( category ).then( (imgs) => {\r\n            setTimeout(() => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            }, 1000);\r\n        })\r\n        // React Hook useEffect has a missing dependency: 'category'. Either include it or \r\n        //remove the dependency array  react-hooks/exhaustive-deps\r\n        /* La solución es poner la category porque puede ser que cambie la categoria se volvería a ejecutar useEfect*/\r\n    }, [category]);\r\n\r\n    return state; // { data: [], loading: true} \r\n} ","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    /*const handleAdd = () => {\r\n        // setCategorias( [...categorias, 'Hora de aventura'] );\r\n        setCategories( cats => ['Hora de aventura', ...cats] );\r\n    }*/\r\n\r\n    return (\r\n        <>\r\n            <h2> GifExpertApp </h2>\r\n            <hr/>\r\n\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr />\r\n\r\n            {/* <button onClick={handleAdd} type=\"button\" className=\"btn btn-outline-primary\"> Agregar </button> */}\r\n\r\n            <ol>\r\n                <h2> GifGrid </h2>\r\n                {\r\n                    categories.map( (category, index) => (\r\n                        <GifGrid key={category} category={category} />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nGifExpertApp.propTypes = {\r\n\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}